{"version":3,"sources":["app.component.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAAoD;AACpD,qFAA+I;AAU/I;IAAA;QAWW,oBAAe,GAAgC;YAClD,EAAE,IAAI,EAAE,kBAAkB,EAAE,KAAK,EAAE,GAAG,EAAE;YACxC,EAAE,IAAI,EAAE,oBAAoB,EAAE,KAAK,EAAE,KAAK,EAAE;YAC5C,EAAE,IAAI,EAAE,mBAAmB,EAAE,KAAK,EAAE,IAAI,EAAE;SAC7C,CAAC;QACK,mBAAc,GAAgC;YACjD,EAAE,IAAI,EAAE,mBAAmB,EAAE,KAAK,EAAE,IAAI,EAAE;YAC1C,EAAE,IAAI,EAAE,oBAAoB,EAAE,KAAK,EAAE,KAAK,EAAE;YAC5C,EAAE,IAAI,EAAE,kBAAkB,EAAE,KAAK,EAAE,GAAG,EAAE;SAC3C,CAAC;QAEK,qBAAgB,GAAW,6BAA6B,CAAC;QACzD,0BAAqB,GAAW,qCAAqC,CAAC;QACtE,eAAU,GAAmB,QAAQ,CAAC;QACtC,WAAM,GAAuB,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;QAC9D,cAAS,GAAG,GAAG,CAAC;QAChB,WAAM,GAAW,OAAO,CAAC;QACzB,eAAU,GAAW,GAAG,CAAC;QACzB,oBAAe,GAAW,IAAI,CAAC;IAwB1C,CAAC;IAtBU,kCAAW,GAAlB;QACI,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,GAAG,EAAE;YAC7B,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,GAAG,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,8cAA8c,CAAC;SACte;aAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,KAAK,EAAE;YACtC,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;YAC7B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,kdAAkd,CAAC;SAC1e;aAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,EAAE;YACrC,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;YAC5B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,ucAAuc,CAAC;SAC/d;IACL,CAAC;IAEM,uCAAgB,GAAvB;QACI,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,KAAK,IAAI,EAAE;YACnC,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC;SACpC;aAAM,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,KAAK,KAAK,EAAE;YAC3C,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,KAAK,CAAC;SACrC;aAAM,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,KAAK,GAAG,EAAE;YACzC,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,GAAG,CAAC;SACnC;IACL,CAAC;IAjDD;QADD,gBAAS,CAAC,YAAY,CAAC;wCACiB;IAGvC;QADC,gBAAS,CAAC,aAAa,CAAC;0CACc;IAGvC;QADC,gBAAS,CAAC,kBAAkB,CAAC;+CACc;IATnC,YAAY;QANxB,gBAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,WAAW,EAAE,oBAAoB;YACjC,SAAS,EAAC,CAAC,mBAAmB,CAAC;YAC/B,SAAS,EAAE,CAAC,2CAAc,EAAE,wCAAW,EAAE,yCAAY,EAAE,8CAAiB,CAAC;SAC1E,CAAC;OACW,YAAY,CAqDxB;IAAD,mBAAC;CArDD,AAqDC,IAAA;AArDY,oCAAY","file":"app.component.js","sourcesContent":["import { Component, ViewChild} from '@angular/core';\nimport { ToolbarService, LinkService, ImageService, HtmlEditorService, RichTextEditorComponent } from '@syncfusion/ej2-angular-richtexteditor';\nimport {DropDownListComponent, FieldSettingsModel} from '@syncfusion/ej2-angular-dropdowns';\nimport { FloatLabelType } from '@syncfusion/ej2-inputs';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls:['app.component.css'],\n  providers: [ToolbarService, LinkService, ImageService, HtmlEditorService]\n})\nexport class AppComponent {\n\n  @ViewChild('defaultRTE')\n    public rteObj: RichTextEditorComponent;\n\n    @ViewChild('enterOption')\n    public enterObj: DropDownListComponent;\n\n    @ViewChild('shiftEnterOption')\n    public shiftEnterObj: DropDownListComponent;\n\n    public enterOptionData: { [key: string]: Object }[] = [\n        { Text: 'Create a new <p>', Value: 'P' },\n        { Text: 'Create a new <div>', Value: 'DIV' },\n        { Text: 'Create a new <br>', Value: 'BR' }\n    ];\n    public shiftEnterData: { [key: string]: Object }[] = [\n        { Text: 'Create a new <br>', Value: 'BR' },\n        { Text: 'Create a new <div>', Value: 'DIV' },\n        { Text: 'Create a new <p>', Value: 'P' }\n    ];\n\n    public enterPlaceHolder: string = 'When pressing the enter key';\n    public shiftEnterPlaceHolder: string = 'When pressing the shift + enter key';\n    public floatLabel: FloatLabelType = 'Always';\n    public fields: FieldSettingsModel = { text: 'Text', value: 'Value' };\n    public rteHeight = 220;\n    public height: string = '200px';\n    public enterValue: string = 'P';\n    public shiftEnterValue: string = 'BR';\n\n    public enterChange(): void {\n        if (this.enterObj.value === 'P') {\n            this.rteObj.enterKey = 'P';\n            this.rteObj.value = `<p>In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:</p><ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`;\n        } else if (this.enterObj.value === 'DIV') {\n            this.rteObj.enterKey = 'DIV';\n            this.rteObj.value = `<div>In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:</div><ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`;\n        } else if (this.enterObj.value === 'BR') {\n            this.rteObj.enterKey = 'BR';\n            this.rteObj.value = `In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:<ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`;\n        }\n    }\n\n    public shiftEnterChange(): void {\n        if (this.shiftEnterObj.value === 'BR') {\n            this.rteObj.shiftEnterKey = 'BR';\n        } else if (this.shiftEnterObj.value === 'DIV') {\n            this.rteObj.shiftEnterKey = 'DIV';\n        } else if (this.shiftEnterObj.value === 'P') {\n            this.rteObj.shiftEnterKey = 'P';\n        }\n    }\n}\n"]}