{"version":3,"sources":["app.component.ts"],"names":["core_1","require","ej2_angular_richtexteditor_1","AppComponent","this","enterOptionData","Text","Value","shiftEnterData","enterPlaceHolder","shiftEnterPlaceHolder","floatLabel","fields","text","value","rteHeight","height","enterValue","shiftEnterValue","prototype","enterChange","enterObj","rteObj","enterKey","shiftEnterChange","shiftEnterObj","shiftEnterKey","__decorate","ViewChild","Component","selector","templateUrl","styleUrls","providers","ToolbarService","LinkService","ImageService","HtmlEditorService","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBACAC,6BAAAD,QAAA,0CAUAE,aAAA,WAAA,SAAAA,IAWWC,KAAAC,gBAA+C,CAClD,CAAEC,KAAM,mBAAoBC,MAAO,KACnC,CAAED,KAAM,qBAAsBC,MAAO,OACrC,CAAED,KAAM,oBAAqBC,MAAO,OAEjCH,KAAAI,eAA8C,CACjD,CAAEF,KAAM,oBAAqBC,MAAO,MACpC,CAAED,KAAM,qBAAsBC,MAAO,OACrC,CAAED,KAAM,mBAAoBC,MAAO,MAGhCH,KAAAK,iBAA2B,8BAC3BL,KAAAM,sBAAgC,sCAChCN,KAAAO,WAA6B,SAC7BP,KAAAQ,OAA6B,CAAEC,KAAM,OAAQC,MAAO,SACpDV,KAAAW,UAAY,IACZX,KAAAY,OAAiB,QACjBZ,KAAAa,WAAqB,IACrBb,KAAAc,gBAA0B,KAwBrC,OAtBWf,EAAAgB,UAAAC,YAAP,WACgC,MAAxBhB,KAAKiB,SAASP,OACdV,KAAKkB,OAAOC,SAAW,IACvBnB,KAAKkB,OAAOR,MAAQ,gdACW,QAAxBV,KAAKiB,SAASP,OACrBV,KAAKkB,OAAOC,SAAW,MACvBnB,KAAKkB,OAAOR,MAAQ,odACW,OAAxBV,KAAKiB,SAASP,QACrBV,KAAKkB,OAAOC,SAAW,KACvBnB,KAAKkB,OAAOR,MAAQ,0cAIrBX,EAAAgB,UAAAK,iBAAP,WACqC,OAA7BpB,KAAKqB,cAAcX,MACnBV,KAAKkB,OAAOI,cAAgB,KACQ,QAA7BtB,KAAKqB,cAAcX,MAC1BV,KAAKkB,OAAOI,cAAgB,MACQ,MAA7BtB,KAAKqB,cAAcX,QAC1BV,KAAKkB,OAAOI,cAAgB,MA/CpCC,WAAA,CADD3B,OAAA4B,UAAU,qCAITD,WAAA,CADC3B,OAAA4B,UAAU,wCAIXD,WAAA,CADC3B,OAAA4B,UAAU,kDARFzB,EAAYwB,WAAA,CANxB3B,OAAA6B,UAAU,CACTC,SAAU,WACVC,YAAa,qBACbC,UAAU,CAAC,qBACXC,UAAW,CAAC/B,6BAAAgC,eAAgBhC,6BAAAiC,YAAajC,6BAAAkC,aAAclC,6BAAAmC,sBAE5ClC,GAAb,GAAamC,QAAAnC,aAAAA","file":"app.component.min.js","sourcesContent":["import { Component, ViewChild} from '@angular/core';\nimport { ToolbarService, LinkService, ImageService, HtmlEditorService, RichTextEditorComponent } from '@syncfusion/ej2-angular-richtexteditor';\nimport {DropDownListComponent, FieldSettingsModel} from '@syncfusion/ej2-angular-dropdowns';\nimport { FloatLabelType } from '@syncfusion/ej2-inputs';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls:['app.component.css'],\n  providers: [ToolbarService, LinkService, ImageService, HtmlEditorService]\n})\nexport class AppComponent {\n\n  @ViewChild('defaultRTE')\n    public rteObj: RichTextEditorComponent;\n\n    @ViewChild('enterOption')\n    public enterObj: DropDownListComponent;\n\n    @ViewChild('shiftEnterOption')\n    public shiftEnterObj: DropDownListComponent;\n\n    public enterOptionData: { [key: string]: Object }[] = [\n        { Text: 'Create a new <p>', Value: 'P' },\n        { Text: 'Create a new <div>', Value: 'DIV' },\n        { Text: 'Create a new <br>', Value: 'BR' }\n    ];\n    public shiftEnterData: { [key: string]: Object }[] = [\n        { Text: 'Create a new <br>', Value: 'BR' },\n        { Text: 'Create a new <div>', Value: 'DIV' },\n        { Text: 'Create a new <p>', Value: 'P' }\n    ];\n\n    public enterPlaceHolder: string = 'When pressing the enter key';\n    public shiftEnterPlaceHolder: string = 'When pressing the shift + enter key';\n    public floatLabel: FloatLabelType = 'Always';\n    public fields: FieldSettingsModel = { text: 'Text', value: 'Value' };\n    public rteHeight = 220;\n    public height: string = '200px';\n    public enterValue: string = 'P';\n    public shiftEnterValue: string = 'BR';\n\n    public enterChange(): void {\n        if (this.enterObj.value === 'P') {\n            this.rteObj.enterKey = 'P';\n            this.rteObj.value = `<p>In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:</p><ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`;\n        } else if (this.enterObj.value === 'DIV') {\n            this.rteObj.enterKey = 'DIV';\n            this.rteObj.value = `<div>In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:</div><ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`;\n        } else if (this.enterObj.value === 'BR') {\n            this.rteObj.enterKey = 'BR';\n            this.rteObj.value = `In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:<ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`;\n        }\n    }\n\n    public shiftEnterChange(): void {\n        if (this.shiftEnterObj.value === 'BR') {\n            this.rteObj.shiftEnterKey = 'BR';\n        } else if (this.shiftEnterObj.value === 'DIV') {\n            this.rteObj.shiftEnterKey = 'DIV';\n        } else if (this.shiftEnterObj.value === 'P') {\n            this.rteObj.shiftEnterKey = 'P';\n        }\n    }\n}\n"]}